Desarrolldo por Mario Sergio Rayas Chávez
Correo mrayas@gmail.com
Fecha Mayo 8, 2022
Se desarrolló en Spring Boot se requiere jdk-18.0.1.1
Las dependencias utilizadas Maven:
JPA: spring-boot-starter-data-jpa
Conexion Mysql: mysql-connector-java
API rest: spring-boot-starter-web

https://www.youtube.com/watch?v=vTu2HQrXtyw&t=850s
Se ejecuta
C:\Developer\Java\Spring Boot\atm>mvnw.cmd spring-boot:run

Para corregir problemas con dependencias

Unix
 ./mvnw clean install
 Win
mvnw clean install

https://www.journaldev.com/33645/maven-commands-options-cheat-sheet

Se requere levantar MySQL en el servidor con IP 192.168.100.52

Java - El ejercicio
 práctico consiste en lo siguiente:


Objetivo: 
Desarrollar un sistema que simule un cajero automático de manera sencilla y práctica, vamos a suponer que el cajero cuenta siempre con la siguiente cantidad de dinero ($ 12550) al inicio del día y en las siguientes denominaciones:


TIPO CANTIDAD DENOMINACIÓN 
Billete 2 1000
Billete 5 500
Billete 10 200
Billete 20 100
Billete 30 50
Billete 40 20
Moneda 50 10
Moneda 100 5
Moneda 200 2
Moneda 300 1
Moneda 100 0.50

El objetivo del cajero será solo aceptar retiros de efectivo y debe de mostrar las cantidades y denominaciones en las cuales va a entregar el monto solicitado.


No habrá recarga de efectivo al cajero ni demás funcionalidades, solo dispensador del efectivo que se le suministra diario por medio manual.
[Se asume que siempre estan las denominaciones antes citada cada vez que se reuiere cubrir un monto]


El diseño del Front End será totalmente libre, así como también el modelo de Base de Datos a utilizar.
[El front ente esta en Android 5.0 en adelante]


Deberás entonces:
Crear la tabla 
[Se crea a traves de JPA en base de datos MySQL de forma local]

Crear el programa que tenga la interfaz en la que el usuario capture la cantidad  que desea retirar.
[Se creó un API rest para que el front end obtenga las denominaciones necesarias
Se encuentra enxpesta de forma local (no por internet) la url es
http://192.168.100.52:8080/denomination
El cliente que consume dicho API esta desarrollado en Android con programación Java
El codigo esta en:
https://github.com/mrayas/simulador_atm
]

El ejercicio se evaluará de acuerdo a la funcionalidad del sistema final, así como también a los métodos o técnicas utilizados para lograr el objetivo tanto en el Front End como en el Back End.

No hay ningún tipo de restricción en cuanto a lo que se debe de utilizar o implementar, el resultado tiene que ser algo práctico, seguro y funcional.

Petición para validar el algoritmo

http://192.168.100.52:8080/denomination/getDenominationsByAmount/8869.50

Respuesta

[
{
"idDenomination": 1000,
"type": "B",
"quantity": 2
},
{
"idDenomination": 500,
"type": "B",
"quantity": 5
},
{
"idDenomination": 200,
"type": "B",
"quantity": 10
},
{
"idDenomination": 100,
"type": "B",
"quantity": 20
},
{
"idDenomination": 50,
"type": "B",
"quantity": 7
},
{
"idDenomination": 10,
"type": "M",
"quantity": 1
},
{
"idDenomination": 5,
"type": "M",
"quantity": 1
},
{
"idDenomination": 2,
"type": "M",
"quantity": 2
},
{
"idDenomination": 0.5,
"type": "M",
"quantity": 1
}
]



